{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive - gitam.in\\\\Desktop\\\\My files\\\\react\\\\project\\\\my_tasks\\\\src\\\\components\\\\TaskState.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport TaskContext from './taskcontext';\nimport alertcontext from './alertcontext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const taskInitial = [];\n  const [tasks, setTasks] = useState(taskInitial);\n  const showalert = useContext(alertcontext);\n\n  // Fetch all tasks\n  const getTasks = async () => {\n    const url = `${host}/api/notes/fetchnotes`;\n    try {\n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      setTasks(json);\n    } catch (error) {\n      console.error('Failed to fetch tasks:', error.message);\n    }\n  };\n\n  // Add a new task\n  const addTask = async (title, description) => {\n    const url = `${host}/api/notes/createnotes`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          title,\n          description\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const newTask = await response.json();\n      setTasks([...tasks, newTask]);\n      setTimeout(() => {\n        showalert(\"task added successfully\");\n      }, 3000);\n    } catch (error) {\n      console.error('Failed to add task:', error.message);\n    }\n  };\n\n  // Update a task\n  const updateTask = async (id, title, description) => {\n    const url = `${host}/api/notes/updateData/${id}`;\n    try {\n      const response = await fetch(url, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        },\n        body: JSON.stringify({\n          title,\n          description\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const updatedTask = await response.json();\n      setTasks(tasks.map(task => task._id === id ? updatedTask : task));\n      setTimeout(() => {\n        showalert(\"task updated successfully\");\n      }, 3000);\n    } catch (error) {\n      console.error('Failed to update task:', error.message);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async id => {\n    const url = `${host}/api/notes/deleteData/${id}`;\n    try {\n      const response = await fetch(url, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n      setTasks(tasks.filter(task => task._id !== id));\n      setTimeout(() => {\n        showalert(\"task deleted successfully\");\n      }, 3000);\n    } catch (error) {\n      console.error('Failed to delete task:', error.message);\n    }\n  };\n  const getuser = async () => {\n    const url = `${host}/auth/getuser`;\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': localStorage.getItem('token')\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const user = await response.json();\n      localStorage.setItem('name', user.name);\n    } catch (error) {\n      console.error('Failed to fetch user:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      setTasks,\n      addTask,\n      updateTask,\n      deleteTask,\n      getTasks,\n      getuser,\n      user\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskState, \"Yi60EZgMG65+J7IP5RGgFkq52Vw=\");\n_c = TaskState;\nexport default TaskState;\nvar _c;\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"names":["React","useContext","useState","TaskContext","alertcontext","jsxDEV","_jsxDEV","TaskState","props","_s","host","taskInitial","tasks","setTasks","showalert","getTasks","url","response","fetch","headers","localStorage","getItem","ok","Error","status","json","error","console","message","addTask","title","description","method","body","JSON","stringify","newTask","setTimeout","updateTask","id","updatedTask","map","task","_id","deleteTask","filter","getuser","user","setItem","name","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive - gitam.in/Desktop/My files/react/project/my_tasks/src/components/TaskState.js"],"sourcesContent":["import React, { useContext,useState} from 'react';\r\nimport TaskContext from './taskcontext'; \r\nimport alertcontext from './alertcontext';\r\n\r\nconst TaskState = (props) => {\r\n  const host = \"http://localhost:5000\";\r\n  const taskInitial = [];\r\n  const [tasks, setTasks] = useState(taskInitial);\r\n  const showalert=useContext(alertcontext)\r\n\r\n  // Fetch all tasks\r\n  const getTasks = async () => {\r\n    const url = `${host}/api/notes/fetchnotes`;\r\n    try {\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem('token')\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Response status: ${response.status}`);\r\n      }\r\n\r\n      const json = await response.json();\r\n      setTasks(json);\r\n    } catch (error) {\r\n      console.error('Failed to fetch tasks:', error.message);\r\n    }\r\n  };\r\n\r\n  // Add a new task\r\n  const addTask = async (title, description) => {\r\n    const url = `${host}/api/notes/createnotes`;\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify({ title, description }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Response status: ${response.status}`);\r\n      }\r\n      const newTask = await response.json();\r\n      setTasks([...tasks, newTask]);\r\n      setTimeout(()=>{\r\n        showalert(\"task added successfully\")\r\n      },3000);\r\n    } catch (error) {\r\n      console.error('Failed to add task:', error.message);\r\n    }\r\n  };\r\n\r\n  // Update a task\r\n  const updateTask = async (id, title, description) => {\r\n    const url = `${host}/api/notes/updateData/${id}`;\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify({ title, description }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Response status: ${response.status}`);\r\n      }\r\n  \r\n      const updatedTask = await response.json();\r\n      setTasks(tasks.map((task) => (task._id === id ? updatedTask : task)));\r\n      setTimeout(()=>{\r\n        showalert(\"task updated successfully\")\r\n      },3000);\r\n    } catch (error) {\r\n      console.error('Failed to update task:', error.message);\r\n    }\r\n  };\r\n\r\n  // Delete a task\r\n  const deleteTask = async (id) => {\r\n    const url = `${host}/api/notes/deleteData/${id}`;\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem('token')\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Response status: ${response.status}`);\r\n      }\r\n\r\n      setTasks(tasks.filter((task) => task._id !== id));\r\n      setTimeout(()=>{\r\n        showalert(\"task deleted successfully\")\r\n      },3000);\r\n    } catch (error) {\r\n      console.error('Failed to delete task:', error.message);\r\n    }\r\n  };\r\n\r\n  const getuser = async () => {\r\n    const url = `${host}/auth/getuser`;\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token')\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const user = await response.json();\r\n        localStorage.setItem('name',user.name)\r\n\r\n      } catch (error) {\r\n        console.error('Failed to fetch user:', error.message);\r\n    }\r\n};\r\n\r\n  return (\r\n    <TaskContext.Provider value={{ tasks, setTasks, addTask, updateTask, deleteTask, getTasks,getuser, user }}>\r\n      {props.children}\r\n    </TaskContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TaskState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}