{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive - gitam.in\\\\Desktop\\\\My files\\\\react\\\\project\\\\my_tasks\\\\src\\\\components\\\\TaskState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport taskcontext from './taskcontext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskState = props => {\n  _s();\n  const host = \"http://localhost:3000\";\n  const taskInitial = [];\n  const [tasks, setTasks] = useState(taskInitial);\n  //fetch all tasks\n  const gettasks = async () => {\n    const url = `${host}/api/notes/fetchnotes`;\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        Headers: {\n          'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjY5MDFlMWExYmM5MTdkY2IyMDk1NDQ5In0sImlhdCI6MTcyMTU1MDAxNX0.5GVnB8uqOQdW5e9ZMx9gyjSqSHOSP6dSit-IiN9YX6s\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Response status: ${response.status}`);\n      }\n      const json = await response.json();\n      setTasks(json); // Update the state with fetched tasks\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  // Delete \n  const deleteNote = id => {\n    const updatestasks = tasks.filter(note => {\n      return note._id !== id;\n    });\n    setTasks(updatestasks);\n  };\n  //update\n  const updateNote = (id, updatedTask) => {\n    const updatedTasks = tasks.map(task => task._id === id ? {\n      ...task,\n      ...updatedTask\n    } : task);\n    setTasks(updatedTasks);\n  };\n  const addNote = newTask => {\n    setTasks([...tasks, newTask]);\n  };\n  return /*#__PURE__*/_jsxDEV(taskcontext.Provider, {\n    value: {\n      tasks,\n      setTasks,\n      deleteNote,\n      updateNote,\n      addNote,\n      gettasks\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskState, \"pzHNH3dnKBkfHlSkvK1B8hiH78g=\");\n_c = TaskState;\nexport default TaskState;\nvar _c;\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"names":["React","useState","taskcontext","jsxDEV","_jsxDEV","TaskState","props","_s","host","taskInitial","tasks","setTasks","gettasks","url","response","fetch","method","Headers","ok","Error","status","json","error","console","message","deleteNote","id","updatestasks","filter","note","_id","updateNote","updatedTask","updatedTasks","map","task","addNote","newTask","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive - gitam.in/Desktop/My files/react/project/my_tasks/src/components/TaskState.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport taskcontext from './taskcontext.js'\r\n\r\nconst TaskState = (props) => {\r\n  const host = \"http://localhost:3000\"\r\n  const taskInitial = [];\r\n  const [tasks, setTasks] = useState(taskInitial);\r\n  //fetch all tasks\r\n  const gettasks = async () => {\r\n    const url = `${host}/api/notes/fetchnotes`;\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        Headers: {\r\n          'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjY5MDFlMWExYmM5MTdkY2IyMDk1NDQ5In0sImlhdCI6MTcyMTU1MDAxNX0.5GVnB8uqOQdW5e9ZMx9gyjSqSHOSP6dSit-IiN9YX6s\"\r\n        }\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Response status: ${response.status}`);\r\n      }\r\n\r\n      const json = await response.json();\r\n      setTasks(json); // Update the state with fetched tasks\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  // Delete \r\n  const deleteNote = (id) => {\r\n    const updatestasks = tasks.filter((note) => { return note._id !== id })\r\n    setTasks(updatestasks)\r\n  }\r\n  //update\r\n  const updateNote = (id, updatedTask) => {\r\n    const updatedTasks = tasks.map((task) =>\r\n      task._id === id ? { ...task, ...updatedTask } : task\r\n    );\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const addNote = (newTask) => {\r\n    setTasks([...tasks, newTask]);\r\n  };\r\n\r\n  return (\r\n    <taskcontext.Provider value={{ tasks, setTasks, deleteNote, updateNote, addNote, gettasks }}>\r\n      {props.children}\r\n    </taskcontext.Provider>\r\n  );\r\n};\r\n\r\n\r\nexport default TaskState;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC3B,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,WAAW,GAAG,EAAE;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACQ,WAAW,CAAC;EAC/C;EACA,MAAMG,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,MAAMC,GAAG,GAAG,GAAGL,IAAI,uBAAuB;IAE1C,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAChCG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,YAAY,EAAE;QAChB;MACF,CAAC,CAAC;MACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoBL,QAAQ,CAACM,MAAM,EAAE,CAAC;MACxD;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCV,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;IAC9B;EACF,CAAC;;EAKD;EACA,MAAMC,UAAU,GAAIC,EAAE,IAAK;IACzB,MAAMC,YAAY,GAAGjB,KAAK,CAACkB,MAAM,CAAEC,IAAI,IAAK;MAAE,OAAOA,IAAI,CAACC,GAAG,KAAKJ,EAAE;IAAC,CAAC,CAAC;IACvEf,QAAQ,CAACgB,YAAY,CAAC;EACxB,CAAC;EACD;EACA,MAAMI,UAAU,GAAGA,CAACL,EAAE,EAAEM,WAAW,KAAK;IACtC,MAAMC,YAAY,GAAGvB,KAAK,CAACwB,GAAG,CAAEC,IAAI,IAClCA,IAAI,CAACL,GAAG,KAAKJ,EAAE,GAAG;MAAE,GAAGS,IAAI;MAAE,GAAGH;IAAY,CAAC,GAAGG,IAClD,CAAC;IACDxB,QAAQ,CAACsB,YAAY,CAAC;EACxB,CAAC;EAED,MAAMG,OAAO,GAAIC,OAAO,IAAK;IAC3B1B,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE2B,OAAO,CAAC,CAAC;EAC/B,CAAC;EAED,oBACEjC,OAAA,CAACF,WAAW,CAACoC,QAAQ;IAACC,KAAK,EAAE;MAAE7B,KAAK;MAAEC,QAAQ;MAAEc,UAAU;MAAEM,UAAU;MAAEK,OAAO;MAAExB;IAAS,CAAE;IAAA4B,QAAA,EACzFlC,KAAK,CAACkC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAACrC,EAAA,CAnDIF,SAAS;AAAAwC,EAAA,GAATxC,SAAS;AAsDf,eAAeA,SAAS;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}